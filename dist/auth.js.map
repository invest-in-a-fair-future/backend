{"version":3,"sources":["../src/auth.js"],"names":["Auth","logger","log4js","getLogger","addContext","app","dotenv","require","config","configurePassport","localStrategy","LocalStrategy","username","password","done","DB","getCollection","then","users","findOne","email","user","Error","result","bcyrpt","compareSync","catch","e","error","message","passport","use","info","credentials","token","jwt","sign","secret","expiresIn","validUntil","Date","setDate","getDate"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;IAEaA,I;;;;;;;;;gCAEQ;AACjB,UAAG,CAACA,IAAI,CAACC,MAAT,EAAiB;AACfD,QAAAA,IAAI,CAACC,MAAL,GAAcC,gBAAOC,SAAP,EAAd;AACAH,QAAAA,IAAI,CAACC,MAAL,CAAYG,UAAZ,CAAuB,QAAvB,EAAiC,MAAjC;AACD;;AAED,aAAOJ,IAAI,CAACC,MAAZ;AACD;;;8BAEgBI,G,EAAK;AACpB,UAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACAD,MAAAA,MAAM,CAACE,MAAP,GAFoB,CAIpB;;AACA,WAAKC,iBAAL,CAAuBJ,GAAvB;AACD;;;sCAEwBA,G,EAAK;AAAA;;AAC5B,UAAMK,aAAa,GAAG,IAAIC,sBAAJ,CAAkB,UAACC,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA8B;AACpEC,QAAAA,EAAE,CAACC,aAAH,CAAiB,OAAjB,EACGC,IADH,CACQ,UAACC,KAAD,EAAW;AACf,iBAAOA,KAAK,CAACC,OAAN,CAAc;AAAEC,YAAAA,KAAK,EAAER;AAAT,WAAd,CAAP;AACD,SAHH,EAIGK,IAJH,CAIQ,UAAAI,IAAI,EAAI;AACZ,cAAG,CAACA,IAAJ,EAAU;AACR,kBAAM,IAAIC,KAAJ,CAAU,gBAAV,CAAN;AACD;;AACD,cAAMC,MAAM,GAAGC,gBAAOC,WAAP,CAAmBZ,QAAnB,EAA6BQ,IAAI,CAACR,QAAlC,CAAf;;AACA,cAAGU,MAAH,EAAU;AACR,mBAAOF,IAAP;AACD,WAFD,MAEO;AACL,kBAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;AACF,SAdH,EAeGL,IAfH,CAeQ,UAAAI,IAAI,EAAI;AACZP,UAAAA,IAAI,CAAC,IAAD,EAAOO,IAAP,CAAJ;AACD,SAjBH,EAkBGK,KAlBH,CAkBS,UAAAC,CAAC,EAAI;AACV,UAAA,KAAI,CAACxB,SAAL,GAAiByB,KAAjB,CAAuBD,CAAvB;;AACAb,UAAAA,IAAI,CAAC,IAAD,EAAO,KAAP,EAAc;AAAEe,YAAAA,OAAO,EAAE;AAAX,WAAd,CAAJ;AACD,SArBH;AAuBAf,QAAAA,IAAI,CAAC,IAAD,EAAOO,IAAP,CAAJ;AACD,OAzBqB,CAAtB;;AA0BAS,wBAASC,GAAT,CAAarB,aAAb;AACD;;;kCAEoBW,I,EAAM;AACzB,aAAOA,IAAI,CAACR,QAAZ;AACA,WAAKV,SAAL,GAAiB6B,IAAjB,CAAsBX,IAAtB;AACA,UAAMY,WAAW,GAAG;AAClBC,QAAAA,KAAK,EAAEC,sBAAIC,IAAJ,CAASf,IAAT,EAAeb,gBAAOU,KAAP,CAAamB,MAA5B,EAAoC;AACzCC,UAAAA,SAAS,EAAE;AAD8B,SAApC,CADW;AAIlBC,QAAAA,UAAU,EAAE,IAAIC,IAAJ;AAJM,OAApB;AAMAP,MAAAA,WAAW,CAACM,UAAZ,CAAuBE,OAAvB,CAA+BR,WAAW,CAACM,UAAZ,CAAuBG,OAAvB,KAAmC,EAAlE;AACA,aAAOT,WAAP;AACD,K,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/* jshint esversion: 6 */\nimport passport from 'passport';\nimport LocalStrategy from 'passport-local';\nimport bcyrpt from 'bcrypt';\nimport log4js from 'log4js';\nimport jwt from 'jsonwebtoken';\nimport config from './config/config';\n\nexport class Auth {\n\n  static getLogger() {\n    if(!Auth.logger) {\n      Auth.logger = log4js.getLogger();\n      Auth.logger.addContext('source', 'Auth');\n    }\n\n    return Auth.logger;\n  }\n\n  static configure(app) {\n    const dotenv = require('dotenv');\n    dotenv.config();\n\n    // this.configureExpress(app);\n    this.configurePassport(app);\n  }\n\n  static configurePassport(app) {\n    const localStrategy = new LocalStrategy((username, password, done) => {\n      DB.getCollection('users')\n        .then((users) => {\n          return users.findOne({ email: username});\n        })\n        .then(user => {\n          if(!user) {\n            throw new Error('User not found');\n          }\n          const result = bcyrpt.compareSync(password, user.password);\n          if(result){\n            return user;\n          } else {\n            throw new Error('Invalid password');\n          }\n        })\n        .then(user => {\n          done(null, user);\n        })\n        .catch(e => {\n          this.getLogger().error(e);\n          done(null, false, { message :'Unable to authenticate.' });\n        });\n\n      done(null, user);\n    });\n    passport.use(localStrategy);\n  }\n\n  static generateToken(user) {\n    delete user.password;\n    this.getLogger().info(user);\n    const credentials = {\n      token: jwt.sign(user, config.users.secret, {\n        expiresIn: '30d'\n      }),\n      validUntil: new Date()\n    };\n    credentials.validUntil.setDate(credentials.validUntil.getDate() + 30);\n    return credentials;\n  }\n  //\n  // static configureExpress(app) {\n  //   const session = require('express-session');\n  //\n  //   // config express-session\n  //   const sess = {\n  //     secret: process.env.SESSION_SECRET,\n  //     cookie: {},\n  //     resave: false,\n  //     saveUninitialized: true\n  //   };\n  //\n  //   if (app.get('env') === 'production') {\n  //     sess.cookie.secure = true; // serve secure cookies, requires https\n  //   }\n  //\n  //   app.use(session(sess));\n  // }\n}"],"file":"auth.js"}