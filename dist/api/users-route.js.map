{"version":3,"sources":["../../src/api/users-route.js"],"names":["UsersRoute","logger","log4js","getLogger","addContext","router","post","req","resp","user","body","status","json","email","name","type","password","country","bcrypt","hashSync","config","users","salt","DB","getCollection","then","findOne","dbUser","insertOne","e","Error","passMessage","result","ok","createdUser","ops","id","_id","credentials","Auth","generateToken","catch","error","code","message","get","put"],"mappings":"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","sourcesContent":["import bcrypt from 'bcrypt';\nimport config from '../config/config';\nimport {Auth} from \"../auth\";\nimport log4js from \"log4js\";\nimport { DB } from '../DB';\n\nexport class UsersRoute {\n  static getLogger() {\n    if(!UsersRoute.logger) {\n      UsersRoute.logger = log4js.getLogger();\n      UsersRoute.logger.addContext('source', 'UsersRoute');\n    }\n\n    return UsersRoute.logger;\n  }\n\n  static configure(router) {\n    router.post('/users', (req, resp) => {\n      const user = req.body;\n\n      if(!user) {\n        return resp.status(400).json({\n          'code': 'INVCRUSR01',\n          'message': 'No user information sent.'\n        });\n      }\n\n      if(!user.email || !user.name || !user.type || !user.password || !user.country) {\n        return resp.status(400).json({\n          'code': 'INVCRUSR02',\n          'message': 'Invalid or missing information.'\n        });\n      } else if(user.type !== 'company' && !user.type !== 'partner' && !user.type !== 'comminityRepresentative') {\n        return resp.status(400).json({\n          'code': 'INVCRUSR02',\n          'message': 'Invalid or missing information.'\n        });\n      }\n\n      user.password = bcrypt.hashSync(user.password, config.users.salt);\n\n      DB.getCollection('users')\n        .then(users => {\n          return users.findOne({email:user.email})\n            .then(dbUser => {\n              if(!dbUser) {\n                return users.insertOne(user);\n              } else {\n                const e = new Error('User already exists');\n                e.passMessage = true;\n                throw e;\n              }\n            });\n        })\n        .then(result => {\n          if(result.result.ok < 1) {\n            throw new Error('Unable to add user');\n          }\n          const createdUser = result.ops[0];\n          delete createdUser.password;\n          createdUser.id = createdUser._id;\n          delete createdUser._id;\n          const credentials = Auth.generateToken(createdUser);\n          return resp.status(201).json({\n            user: createdUser,\n            credentials: credentials\n          });\n        })\n        .catch(e => {\n          this.getLogger().error(e);\n          if(e.passMessage) {\n            return resp.status(500).json({\n              code: 'INVCRUSR501',\n              message: e.message\n            });\n\n          } else {\n            return resp.status(500).json({\n              code: 'INVCRUSR500',\n              message: 'Unable to create user.'\n            });\n          }\n        });\n    });\n\n    router.get('/users', (req, resp) => {\n      resp.json({\n        \"country\" : \"NL\",\n        \"phoneNumber\" : \"+31600000000\",\n        \"name\" : \"Invest in a Fair Future\",\n        \"id\" : \"c447d376-6a46-4e98-89da-f86a81255503\",\n        \"type\" : \"company\",\n        \"email\" : \"john@investinafairfuture.org\"\n      });\n    });\n\n    router.put('/users', (req, resp) => {\n      resp.json({\n        \"country\" : \"NL\",\n        \"phoneNumber\" : \"+31600000000\",\n        \"name\" : \"Invest in a Fair Future\",\n        \"id\" : \"c447d376-6a46-4e98-89da-f86a81255503\",\n        \"type\" : \"company\",\n        \"email\" : \"john@investinafairfuture.org\"\n      });\n    });\n  }\n}"],"file":"users-route.js"}